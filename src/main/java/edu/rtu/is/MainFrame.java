/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.rtu.is;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.File;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author othmanm2
 */
public class MainFrame extends javax.swing.JFrame {

    String dbFilePath, rFilePath;
    private IntelligentSystem is;
    private ArrayList<JCheckBox> checkBoxes = new ArrayList();
    // Variables declaration - do not modify
    private javax.swing.JButton calculateB;
    private javax.swing.JTable cfTable;
    private javax.swing.JPanel conditionsPanel;
    private javax.swing.JTable dataTable;
    private javax.swing.JScrollPane dataTableSP;
    private javax.swing.JLabel dbFileNameL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea monitorTA;
    private javax.swing.JLabel resultL;
    private javax.swing.JTextArea ruleTA;
    private javax.swing.JLabel rulesFileL;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JMenuItem uploadDFB;
    private javax.swing.JMenuItem uploadRules;
    private javax.swing.JScrollPane valuesTableSP;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                 MainFrame mf = new MainFrame();
                 mf.setSize(Toolkit.getDefaultToolkit().getScreenSize());
                 mf.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        dataTableSP = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        valuesTableSP = new javax.swing.JScrollPane();
        cfTable = new javax.swing.JTable();
        selectionPanel = new javax.swing.JPanel();
        conditionsPanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        calculateB = new javax.swing.JButton();
        resultL = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ruleTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        monitorTA = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dbFileNameL = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rulesFileL = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        uploadDFB = new javax.swing.JMenuItem();
        uploadRules = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Intelligent System");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridLayout(3, 2));

        dataTableSP.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Base"));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{

                }
        ));
        dataTable.setEnabled(false);
        dataTableSP.setViewportView(dataTable);

        jPanel2.add(dataTableSP);

        valuesTableSP.setBorder(javax.swing.BorderFactory.createTitledBorder("Confident Factors"));

        cfTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{

                }
        ));
        cfTable.setEnabled(false);
        valuesTableSP.setViewportView(cfTable);

        jPanel2.add(valuesTableSP);

        selectionPanel.setLayout(new java.awt.GridBagLayout());

        conditionsPanel.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        selectionPanel.add(conditionsPanel, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        calculateB.setText("Predict");
        calculateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateBActionPerformed(evt);
            }
        });
        jPanel6.add(calculateB, new java.awt.GridBagConstraints());

        resultL.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(resultL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        selectionPanel.add(jPanel6, gridBagConstraints);

        jPanel2.add(selectionPanel);

        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.PAGE_AXIS));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Rules"));

        ruleTA.setColumns(20);
        ruleTA.setRows(5);
        jScrollPane1.setViewportView(ruleTA);

        jPanel7.add(jScrollPane1);

        monitorTA.setColumns(20);
        monitorTA.setRows(5);
        jScrollPane2.setViewportView(monitorTA);

        jPanel7.add(jScrollPane2);

        jPanel2.add(jPanel7);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Database File:");
        jPanel4.add(jLabel1);
        jPanel4.add(dbFileNameL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Rules File:");
        jPanel5.add(jLabel2);
        jPanel5.add(rulesFileL);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        uploadDFB.setText("Upload data file");
        uploadDFB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadDFBActionPerformed(evt);
            }
        });
        jMenu1.add(uploadDFB);

        uploadRules.setText("Upload rules file");
        uploadRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadRulesActionPerformed(evt);
            }
        });
        jMenu1.add(uploadRules);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>

    private void uploadDFBActionPerformed(java.awt.event.ActionEvent evt) {
        File selectedFile = null;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showDialog(this, "Select");
        selectedFile = fileChooser.getSelectedFile();

        dbFilePath = selectedFile.getAbsolutePath();
        updateLabels();
    }

    private void uploadRulesActionPerformed(java.awt.event.ActionEvent evt) {
        File selectedFile = null;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showDialog(this, "Select");
        selectedFile = fileChooser.getSelectedFile();

        rFilePath = selectedFile.getAbsolutePath();
        updateLabels();

    }

    private void calculateBActionPerformed(java.awt.event.ActionEvent evt) {
        List<String> selectedConditions = checkBoxes.stream().filter(c -> c.isSelected()).map(ch -> ch.getText()).collect(Collectors.toList());
        String result = is.getResult(selectedConditions);
        String data = "";
        data = data + "\n Matching rules: " + (is.getMatchedRule() == null ? "N/A" : is.getMatchedRule().toString());
        data = data + "\n Parially matching rules : " + (is.getPartiallyMatchedRules().isEmpty() ? "N/A" : is.getPartiallyMatchedRules().toString());
        monitorTA.setText(data);
        resultL.setText(result);
        is.reset();
    }

    private void updateLabels() {
        dbFileNameL.setText(dbFilePath);
        rulesFileL.setText(rFilePath);
        if (dbFilePath != null && rFilePath != null) {
            is = new IntelligentSystem(dbFilePath, rFilePath);
            updateUI();
        }
    }

    private void updateUI() {
        is = new IntelligentSystem(dbFilePath, rFilePath);

        // CSVParser records = is.load();
        DefaultTableModel dataTableModel = (DefaultTableModel) dataTable.getModel();
        DefaultTableModel cfTableModel = (DefaultTableModel) cfTable.getModel();
        cfTableModel.addColumn("Factor");
        cfTableModel.addColumn("Value");

        is.getRecords().getHeaderNames().stream().forEach(h -> {

            float value = is.calculateValue(h);
            System.out.println(value);

            Vector cfRow = new Vector();
            cfRow.add(h);
            cfRow.add(value);

            cfTableModel.addRow(cfRow);
            dataTableModel.addColumn(h);

        });
        is.getRecords().forEach(record -> {

            Vector row = new Vector();
            record.forEach(d -> row.add(d));
            dataTableModel.addRow(row);
        });
        StringBuffer rulesString = new StringBuffer();
        Set con = new HashSet();
        is.getRules().forEach(r -> {
            rulesString.append(r.toString()).append("\n");

            for (String c : r.getConditions()) {
                con.add(c);
            }
        });
        ruleTA.setText(rulesString.toString());

        con.forEach(c -> {
            JCheckBox cb = new JCheckBox(c.toString());
            checkBoxes.add(cb);
            conditionsPanel.add(cb);

        });
        JCheckBox invalidCB = new JCheckBox("Invalid-F1");
        checkBoxes.add(invalidCB);
        conditionsPanel.add(invalidCB);
        invalidCB = new JCheckBox("Invalid-F2");
        checkBoxes.add(invalidCB);
        conditionsPanel.add(invalidCB);

        selectionPanel.validate();

    }
    // End of variables declaration                   
}
